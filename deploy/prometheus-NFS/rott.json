{

  "swagger": "2.0",

  "info": {

    "version": "1.9.3",

    "title": "Rotterdam CaaS",

    "description": "Rotterdam CaaS REST API is responsible for the deployment of tasks and docks in a Kubernetes cluster"

  },

  "schemes": ["http"],

  "host": "192.168.7.28:31815",

  "basePath": "/api/v1",

  "tags": [{

      "name": "status",

      "description": "Information about the status and configuration of Rotterdam"

    }, {

      "name": "task",

      "description": "Rotterdam Tasks: creation, deletion and management"

    }, {

      "name": "function",

      "description": "Serverless functions: creation, deletion and management"

    }, {

      "name": "imec",

      "description": "Infrastructure operations"

    }, {

      "name": "qos",

      "description": "QoS / SLA operations"

    }, {

      "name": "dock",

      "description": "Operations about Rotterdam Docks (namespaces) - DEPRECATED"

    }

  ],  

  "paths": {

    "/": {

      "get": {

        "tags": ["status"],

        "description": "status of the rest api server",

        "summary": "Get the status of the rest api server",

        "operationId": "getStatus",

        "produces": ["application/json"],

        "responses": {

          "200": {

            "description": "REST API server information"

          }

        }

      }

    },

    "/config": {

      "get": {

        "tags": ["status"],

        "description": "Returns the current Rotterdam Configuration",

        "summary": "Get the current Rotterdam Configuration",

        "operationId": "getConfiguration",

        "produces": ["application/json"],

        "responses": {

          "200": {

            "description": "Current Rotterdam Configuration"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "put": {

        "tags": ["status"],

        "description": "Updates the Rotterdam Configuration",

        "summary": "Updates the Rotterdam Configuration",

        "operationId": "updateConfig",

        "consumes": ["application/json"],

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "body",

            "name": "configuration",

            "required": true,

            "schema": {

              "$ref": "#/definitions/ConfigurationSetUp"

            }

          }

        ],

        "responses": {

          "200": {

            "description": "Updated",

            "schema": {

              "$ref": "#/definitions/Configuration"

            }

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/version": {

      "get": {

        "tags": ["status"],

        "description": "Returns the current Rotterdam version",

        "summary": "Get the current Rotterdam version",

        "operationId": "getVersion",

        "produces": ["application/json"],

        "responses": {

          "200": {

            "description": "Rotterdam version"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/status": {

      "get": {

        "tags": ["status"],

        "description": "Returns the current Rotterdam status",

        "summary": "Get the current Rotterdam status",

        "operationId": "getStatus2",

        "produces": ["application/json"],

        "responses": {

          "200": {

            "description": "Rotterdam status"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/docks/tasks": {

      "get": {

        "tags": ["dock"],

        "description": "Returns all the current Rotterdam tasks (all docks)",

        "summary": "Returns all the current Rotterdam tasks (all docks)",

        "operationId": "getAllTasks",

        "produces": ["application/json"],

        "responses": {

          "200": {

            "description": "Rotterdam tasks"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "post": {

        "tags": ["dock"],

        "description": "Creates a new Rotterdam Task in a dock",

        "summary": "Creates a new Rotterdam Task in a dock",

        "operationId": "createTask",

        "consumes": ["application/json"],

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "body",

            "name": "task",

            "required": true,

            "schema": {

              "$ref": "#/definitions/Task"

            }

          }

        ],

        "responses": {

          "200": {

            "description": "Task Created",

            "schema": {

              "$ref": "#/definitions/Task"

            }

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/docks/tasks-compss": {

      "post": {

        "tags": ["dock"],

        "description": "Creates a new Rotterdam COMPSs Task (set of workers)",

        "summary": "Creates a new Rotterdam COMPSs Task (set of workers)",

        "operationId": "createCompssTask",

        "consumes": ["application/json"],

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "body",

            "name": "task",

            "required": true,

            "schema": {

              "$ref": "#/definitions/COMPSsTask"

            }

          }

        ],

        "responses": {

          "200": {

            "description": "Task Created",

            "schema": {

              "$ref": "#/definitions/COMPSsTask"

            }

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/docks/tasksqos": {

      "get": {

        "tags": ["dock"],

        "description": "Returns all the current Rotterdam tasks QoS (from all docks)",

        "summary": "Returns all the current Rotterdam tasks QoS (from all docks)",

        "operationId": "GetAllTasksQoS",

        "produces": ["application/json"],

        "responses": {

          "200": {

            "description": "Rotterdam tasks"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/docks/{dock}/tasks": {

      "get": {

        "tags": ["dock"],

        "description": "Get the list of tasks of a specific dock",

        "summary": "Get the list of tasks of a specific dock",

        "operationId": "getDockTasks",

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "path",

            "name": "dock",

            "description": "namespace or logical group of the tasks",

            "required": true,

            "type": "string"

          }

        ],

        "responses": {

          "200": {

            "description": "Tasks' list retrived"

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/docks/{dock}/tasks/{id}": {

      "get": {

        "tags": ["dock"],

        "description": "Gets a Rotterdam Task",

        "summary": "Gets a Rotterdam Task",

        "operationId": "getTask",

        "produces": ["application/json"],

        "parameters": [

          {

            "name": "dock",

            "description": "namespace or logical group of the tasks",

            "in": "path",

            "required": true,

            "type": "string"

          },

          {

            "name": "id",

            "description": "id the task",

            "in": "path",

            "required": true,

            "type": "string"

          }

        ],

        "responses": {

          "200": {

            "description": "Task get",

            "schema": {

              "$ref": "#/definitions/Task"

            }

          },

          "400": {

            "description": "Bad Request"

          },

          "404": {

            "description": "Task Not Found"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "put": {

        "tags": ["dock"],

        "description": "Updates a Rotterdam Task",

        "summary": "Updates a Rotterdam Task",

        "operationId": "updateTask",

        "consumes": ["application/json"],

        "produces": ["application/json"],

        "parameters": [

          {

            "name": "dock",

            "description": "namespace or logical group of the tasks",

            "in": "path",

            "required": true,

            "type": "string"

          },

          {

            "name": "id",

            "description": "id the task",

            "in": "path",

            "required": true,

            "type": "string"

          }

        ],

        "responses": {

          "200": {

            "description": "Task get",

            "schema": {

              "$ref": "#/definitions/Task"

            }

          },

          "400": {

            "description": "Bad Request"

          },

          "404": {

            "description": "Task Not Found"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "delete": {

        "tags": ["dock"],

        "description": "Deletes a Rotterdam Task",

        "summary": "Deletes a Rotterdam Task",

        "operationId": "deleteTask",

        "produces": ["application/json"],

        "parameters": [

          {

            "name": "dock",

            "description": "namespace or logical group of the tasks",

            "in": "path",

            "required": true,

            "type": "string"

          },

          {

            "name": "id",

            "description": "id the task",

            "in": "path",

            "required": true,

            "type": "string"

          }

        ],

        "responses": {

          "200": {

            "description": "Task get",

            "schema": {

              "$ref": "#/definitions/Task"

            }

          },

          "400": {

            "description": "Bad Request"

          },

          "404": {

            "description": "Task Not Found"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/tasks/{id}": {

      "get": {

        "tags": ["task"],

        "description": "Gets a Rotterdam Task",

        "summary": "Gets a Rotterdam Task",

        "operationId": "getRotterdamTask",

        "produces": ["application/json"],

        "parameters": [

          {

            "name": "id",

            "description": "id the task",

            "in": "path",

            "required": true,

            "type": "string"

          }

        ],

        "responses": {

          "200": {

            "description": "Task get",

            "schema": {

              "$ref": "#/definitions/Task"

            }

          },

          "400": {

            "description": "Bad Request"

          },

          "404": {

            "description": "Task Not Found"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "delete": {

        "tags": ["task"],

        "description": "Deletes a Rotterdam Task",

        "summary": "Deletes a Rotterdam Task",

        "operationId": "deleteRotterdamTask",

        "produces": ["application/json"],

        "parameters": [

          {

            "name": "id",

            "description": "id the task",

            "in": "path",

            "required": true,

            "type": "string"

          }

        ],

        "responses": {

          "200": {

            "description": "Task get",

            "schema": {

              "$ref": "#/definitions/Task"

            }

          },

          "400": {

            "description": "Bad Request"

          },

          "404": {

            "description": "Task Not Found"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/tasks/{id}/all": {

      "get": {

        "tags": ["task"],

        "description": "Gets a Rotterdam Task, including deployment info",

        "summary": "Gets a Rotterdam Task, including deployment info",

        "operationId": "getRotterdamTaskFullInfo",

        "produces": ["application/json"],

        "parameters": [

          {

            "name": "id",

            "description": "id the task",

            "in": "path",

            "required": true,

            "type": "string"

          }

        ],

        "responses": {

          "200": {

            "description": "Task get",

            "schema": {

              "$ref": "#/definitions/Task"

            }

          },

          "400": {

            "description": "Bad Request"

          },

          "404": {

            "description": "Task Not Found"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/tasks": {

      "get": {

        "tags": ["task"],

        "description": "Returns all the current Rotterdam tasks (from all infrastructures / clusters)",

        "summary": "Returns all the current Rotterdam tasks (from all infrastructures / clusters)",

        "operationId": "getAllRotterdamTasks",

        "produces": ["application/json"],

        "responses": {

          "200": {

            "description": "Rotterdam tasks"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "post": {

        "tags": ["task"],

        "description": "Creates a new Rotterdam Task",

        "summary": "Creates a new Rotterdam Task",

        "operationId": "createRotterdamTask",

        "consumes": ["application/json"],

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "body",

            "name": "task",

            "required": true,

            "schema": {

              "$ref": "#/definitions/Task"

            }

          }

        ],

        "responses": {

          "200": {

            "description": "Task Created",

            "schema": {

              "$ref": "#/definitions/Task"

            }

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/functions/{id}": {

      "get": {

        "tags": ["function"],

        "description": "Gets a function",

        "summary": "Gets a function",

        "operationId": "getFunction",

        "produces": ["application/json"],

        "parameters": [

          {

            "name": "id",

            "description": "id the task",

            "in": "path",

            "required": true,

            "type": "string"

          }

        ],

        "responses": {

          "200": {

            "description": "Get function",

            "schema": {

              "$ref": "#/definitions/Task"

            }

          },

          "400": {

            "description": "Bad Request"

          },

          "404": {

            "description": "Function Not Found"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "delete": {

        "tags": ["function"],

        "description": "Deletes a function",

        "summary": "Deletes a function",

        "operationId": "deleteFunction",

        "produces": ["application/json"],

        "parameters": [

          {

            "name": "id",

            "description": "id of the function",

            "in": "path",

            "required": true,

            "type": "string"

          }

        ],

        "responses": {

          "200": {

            "description": "Task get",

            "schema": {

              "$ref": "#/definitions/Task"

            }

          },

          "400": {

            "description": "Bad Request"

          },

          "404": {

            "description": "Function Not Found"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "post": {

        "tags": ["function"],

        "description": "Call to a Function",

        "summary": "Call to a Function",

        "operationId": "callFunction",

        "consumes": ["application/json"],

        "produces": ["application/json"],

        "parameters": [

          {

            "name": "id",

            "description": "id of the function",

            "in": "path",

            "required": true,

            "type": "string"

          },

          {

            "in": "body",

            "name": "function",

            "required": true,

            "schema": {

              "$ref": "#/definitions/Function"

            }

          }

        ],

        "responses": {

          "200": {

            "description": "Function Called",

            "schema": {

              "$ref": "#/definitions/Function"

            }

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/functions": {

      "get": {

        "tags": ["function"],

        "description": "Returns all the current Rotterdam functions (from all infrastructures / clusters)",

        "summary": "Returns all the current Rotterdam functions (from all infrastructures / clusters)",

        "operationId": "getAllFunctions",

        "produces": ["application/json"],

        "responses": {

          "200": {

            "description": "Rotterdam Functions"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "post": {

        "tags": ["function"],

        "description": "Creates a new Function",

        "summary": "Creates a new Function",

        "operationId": "createFunction",

        "consumes": ["application/json"],

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "body",

            "name": "function",

            "required": true,

            "schema": {

              "$ref": "#/definitions/Function"

            }

          }

        ],

        "responses": {

          "200": {

            "description": "Function Created",

            "schema": {

              "$ref": "#/definitions/Task"

            }

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/sla/tasks/{id}/guarantee/{guarantee}": {

      "post": {

        "tags": ["qos"],

        "description": "Process SLALite violations",

        "summary": "Process SLALite violations",

        "operationId": "processSLAViolation",

        "consumes": ["application/json"],

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "path",

            "name": "id",

            "description": "id of the task / agreement client id",

            "required": true,

            "type": "string"

          },

          {

            "in": "path",

            "name": "guarantee",

            "description": "guarantee name",

            "required": true,

            "type": "string"

          },

          {

            "in": "body",

            "name": "violation",

            "required": true

          }

        ],

        "responses": {

          "200": {

            "description": "Task Created",

            "schema": {

              "$ref": "#/definitions/Task"

            }

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/qos/definitions/{name}": {

      "get": {

        "tags": ["qos"],

        "description": "Get a qos definition by name / id",

        "summary": "Get a qos definition by name / id",

        "operationId": "GetQoSDef",

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "path",

            "name": "name",

            "description": "name of the qos definition",

            "required": true,

            "type": "string"

          }

        ],

        "responses": {

          "200": {

            "description": "Rotterdam QoS definition"

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/qos/definitions": {

      "get": {

        "tags": ["qos"],

        "description": "Get the list of QoS definitions",

        "summary": "Get the list of QoS definitions",

        "operationId": "GetQoSDefs",

        "produces": ["application/json"],

        "parameters": [],

        "responses": {

          "200": {

            "description": "Rotterdam QoS definitions"

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "post": {

        "tags": ["qos"],

        "description": "Load QoS definitions for SLAs generation",

        "summary": "Load QoS definitions for SLAs generation",

        "operationId": "PostQoSDefs",

        "consumes": ["application/json"],

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "body",

            "name": "tasksQoS",

            "required": true,

            "schema": {

              "$ref": "#/definitions/TasksQoS"

            }

          }

        ],

        "responses": {

          "200": {

            "description": "Rotterdam QoS definitions"

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/imec": {

      "get": {

        "tags": ["imec"],

        "description": "Returns all infrastructures",

        "summary": "Returns all infrastructures",

        "operationId": "getAllInfrastructures",

        "produces": ["application/json"],

        "responses": {

          "200": {

            "description": "Rotterdam Infrastructures",

            "schema": {

              "$ref": "#/definitions/Infrastructure"

            }

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "post": {

        "tags": ["imec"],

        "description": "Creates a new infrastructure",

        "summary": "Creates a new infrastructure",

        "operationId": "createInfrastructure",

        "consumes": ["application/json"],

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "body",

            "name": "infr",

            "required": true,

            "schema": {

              "$ref": "#/definitions/Infrastructure"

            }

          }

        ],

        "responses": {

          "200": {

            "description": "Infrastructure Created",

            "schema": {

              "$ref": "#/definitions/Infrastructure"

            }

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/imec/{id}": {

      "get": {

        "tags": ["imec"],

        "description": "Returns a infrastructure",

        "summary": "Returns a infrastructure",

        "operationId": "getInfrastructure",

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "path",

            "name": "id",

            "description": "id of the infrastructure",

            "required": true,

            "type": "string"

          }

        ],

        "responses": {

          "200": {

            "description": "Rotterdam Infrastructure",

            "schema": {

              "$ref": "#/definitions/Infrastructure"

            }

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "put": {

        "tags": ["imec"],

        "description": "Updates an infrastructure",

        "summary": "Updates an infrastructure",

        "operationId": "updateInfrastructure",

        "consumes": ["application/json"],

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "path",

            "name": "id",

            "description": "id of the infrastructure",

            "required": true,

            "type": "string"

          },

          {

            "in": "body",

            "name": "infr",

            "required": true,

            "schema": {

              "$ref": "#/definitions/Infrastructure"

            }

          }

        ],

        "responses": {

          "200": {

            "description": "Infrastructure updated",

            "schema": {

              "$ref": "#/definitions/Infrastructure"

            }

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "delete": {

        "tags": ["imec"],

        "description": "Deletes an infrastructure",

        "summary": "Deletes an infrastructure",

        "operationId": "deleteInfrastructure",

        "consumes": ["application/json"],

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "path",

            "name": "id",

            "description": "id of the infrastructure",

            "required": true,

            "type": "string"

          }

        ],

        "responses": {

          "200": {

            "description": "Infrastructure deleted",

            "schema": {

              "$ref": "#/definitions/Infrastructure"

            }

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    },

    "/imec/{id}/cluster": {

      "get": {

        "tags": ["imec"],

        "description": "Returns an infrastructure cluster",

        "summary": "Returns an infrastructure cluster",

        "operationId": "getInfrastructureCluster",

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "path",

            "name": "id",

            "description": "id of the infrastructure",

            "required": true,

            "type": "string"

          }

        ],

        "responses": {

          "200": {

            "description": "Rotterdam cluster",

            "schema": {

              "$ref": "#/definitions/Cluster"

            }

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "post": {

        "tags": ["imec"],

        "description": "Creates a new cluster",

        "summary": "Creates a new cluster",

        "operationId": "createInfrastructureCluster",

        "consumes": ["application/json"],

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "path",

            "name": "id",

            "description": "id of the infrastructure",

            "required": true,

            "type": "string"

          },

          {

            "in": "body",

            "name": "infr",

            "required": true,

            "schema": {

              "$ref": "#/definitions/Cluster"

            }

          }

        ],

        "responses": {

          "200": {

            "description": "Cluster Created",

            "schema": {

              "$ref": "#/definitions/Cluster"

            }

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      },

      "delete": {

        "tags": ["imec"],

        "description": "Deletes a cluster",

        "summary": "Deletes cluster",

        "operationId": "deleteInfrastructureCluster",

        "consumes": ["application/json"],

        "produces": ["application/json"],

        "parameters": [

          {

            "in": "path",

            "name": "id",

            "description": "id of the infrastructure",

            "required": true,

            "type": "string"

          }

        ],

        "responses": {

          "200": {

            "description": "Cluster Deleted",

            "schema": {

              "$ref": "#/definitions/Cluster"

            }

          },

          "400": {

            "description": "Bad Request"

          }

        },

        "security": [{

          "rotterdam_auth": ["write:rotterdam", "read:rotterdam"]

        }]

      }

    }

  },

  "securityDefinitions": {

		"rotterdam_auth": {

			"type": "oauth2",

			"authorizationUrl": "https://rotterdam.caas/oauth/authorize",

			"flow": "implicit",

			"scopes": {

				"write:rotterdam": "modify tasks and docks",

				"read:rotterdam": "read tasks and docks"

			}

		},

		"api_key": {

			"type": "apiKey",

			"name": "api_key",

			"in": "header"

		}

	},

  "definitions": {

    "ConfigurationSetUp": {

      "description": "A representation of a Rotterdam ConfigurationSetUp",

      "type": "object",

      "properties": {

        "Clusters": {

          "type": "array",

          "items": {

            "type": "object",

            "properties": {

              "ID": {

                "type": "string",

                "example": "123827368713"

              },

              "Name": {

                "type": "string",

                "example": "cluster"

              },

              "Description": {

                "type": "string",

                "example": "cluster description"

              },

              "Type": {

                "type": "string",

                "example": "type"

              },

              "SO": {

                "type": "string",

                "example": "Ubuntu 16"

              },

              "DefaultDock": {

                "type": "string",

                "example": "class"

              },

              "OpenshiftOauthToken": {

                "type": "string",

                "example": "21jhgsds12321..."

              },

              "KubernetesEndPoint": {

                "type": "string",

                "example": "http://localhost:9001"

              },

              "OpenshiftEndPoint": {

                "type": "string",

                "example": "http://localhost:9002"

              },

              "SLALiteEndPoint": {

                "type": "string",

                "example": "http://localhost:9003"

              },

              "PrometheusPushgatewayEndPoint": {

                "type": "string",

                "example": "http://localhost:9004"

              },

              "HostIP": {

                "type": "string",

                "example": "127.0.0.1"

              },

              "HostPort": {

                "type": "int",

                "example": 22

              },

              "User": {

                "type": "string",

                "example": "username"

              },

              "Password": {

                "type": "string",

                "example": "password"

              },

              "KeyFile": {

                "type": "string",

                "example": "KeyFile"

              }

            }

          }

        }

      }

    },

    "Configuration": {

      "description": "A representation of a Rotterdam Configuration",

      "type": "object",

      "properties": {

        "RestApiVersion": {

          "type": "string",

          "example": "1.0"

        },

        "CaaSVersion": {

          "type": "string",

          "example": "1.0"

        },

        "FaaSVersion": {

          "type": "string",

          "example": "1.0"

        },

        "RulesEngineVersion": {

          "type": "string",

          "example": "1.0"

        },

        "IMECVersion": {

          "type": "string",

          "example": "1.0"

        },

        "SLALiteVersion": {

          "type": "string",

          "example": "1.0"

        },

        "ServerPort": {

          "type": "string",

          "example": "80"

        },

        "Clusters": {

          "type": "array",

          "items": {

            "type": "object",

            "properties": {

              "ID": {

                "type": "string",

                "example": "123827368713"

              },

              "Name": {

                "type": "string",

                "example": "cluster"

              },

              "Description": {

                "type": "string",

                "example": "cluster description"

              },

              "Type": {

                "type": "string",

                "example": "type"

              },

              "SO": {

                "type": "string",

                "example": "Ubuntu 16"

              },

              "DefaultDock": {

                "type": "string",

                "example": "class"

              },

              "OpenshiftOauthToken": {

                "type": "string",

                "example": "21jhgsds12321..."

              },

              "KubernetesEndPoint": {

                "type": "string",

                "example": "http://localhost:9001"

              },

              "OpenshiftEndPoint": {

                "type": "string",

                "example": "http://localhost:9002"

              },

              "SLALiteEndPoint": {

                "type": "string",

                "example": "http://localhost:9003"

              },

              "PrometheusPushgatewayEndPoint": {

                "type": "string",

                "example": "http://localhost:9004"

              },

              "HostIP": {

                "type": "string",

                "example": "127.0.0.1"

              },

              "HostPort": {

                "type": "int",

                "example": 22

              },

              "User": {

                "type": "string",

                "example": "username"

              },

              "Password": {

                "type": "string",

                "example": "password"

              },

              "KeyFile": {

                "type": "string",

                "example": "KeyFile"

              }

            }

          }

        }

      }

    },

    "Infrastructure": {

      "description": "A representation of a Rotterdam Infrastructure",

      "type": "object",

      "properties": {

        "name": {

          "type": "string",

          "example": "Name"

        },

        "description": {

          "type": "string",

          "example": "Infrastructure description"

        },

        "type": {

          "type": "string",

          "example": "microk8s"

        },

        "so": {

          "type": "string",

          "example": "ubuntu18"

        },

        "defaultDock": {

          "type": "string",

          "example": "default"

        },

        "hostIP": {

          "type": "string",

          "example": "192.168.1.12"

        },

        "hostPort": {

          "type": "int",

          "example": 22

        },

        "user": {

          "type": "string",

          "example": "user_name"

        },

        "password": {

          "type": "string",

          "example": "user_password"

        }

      }

    },

    "Cluster": {

      "description": "A representation of a Kubernetes / Openshift  cluster",

      "type": "object",

      "properties": {

        "type": {

          "type": "string",

          "example": "microK8s"

        },

        "apiPort": {

          "type": "int",

          "example": 8001

        }

      }

    },

    "TasksQoS": { 

      "description": "A representation of a Tasks QoS list (version 1.1)",

      "type": "array",

      "items": {

        "type": "object",

        "properties": {

          "type": {

            "type": "string",

            "example": "infr"

          },

          "guaranteeName": {

            "type": "string",

            "example": "KubeletTooManyPods"

          },

          "maxAllowed": {

            "type": "int",

            "example": 3

          },

          "action": {

            "type": "string",

            "example": "scale_in"

          },

          "scaleFactor": {

            "type": "int",

            "example": 2

          },

          "guarantees": {

            "type": "array",

            "items": {

              "type": "object",

              "properties": {

                "name": {

                  "type": "string",

                  "example": "kubelet_running_pod_count"

                },

                "constraint": {

                  "type": "string",

                  "example": "kubelet_running_pod_count < 50"

                }

              }

            }

          }

        }

      }

    },

    "Task": {

      "description": "A representation of a Rotterdam Task (version 1.1)",

      "type": "object",

      "required": [

        "name qos containers"

      ],

      "properties": {

        "name": {

          "type": "string",

          "example": "nginx-app"

        },

        "dock": {

          "type": "string",

          "example": "class"

        },

        "qos": {



            "type": "object",

            "required": [

              "name"

            ],

            "properties": {

              "name": {

                "type": "string",

                "example": "KubeletTooManyPods"

              },

              "description": {

                "type": "string",

                "example": "scale down task if cluster pods > 50"

              }

            }

          

        },

        "replicas": {

          "type": "int",

          "example": 2

        },

        "containers": {

          "type": "array",

          "items": {

            "type": "object",

            "required": [

              "name image ports"

            ],

            "properties": {

              "name": {

                "type": "string",

                "example": "nginx"

              },

              "image": {

                "type": "string",

                "example": "nginx"

              },

              "ports": {

                "type": "array",

                "items": {

                  "type": "object",

                  "properties": {

                    "containerPort": {

                      "type": "int",

                      "example": 80

                    },

                    "hostPort": {

                      "type": "int",

                      "example": 80

                    },

                    "protocol": {

                      "type": "string",

                      "example": "tcp"

                    }

                  }

                }

              },

              "volumes": {

                "type": "array",

                "items": {

                  "type": "object",

                  "properties": {

                    "name": {

                      "type": "string",

                      "example": "name"

                    },

                    "mounthPath": {

                      "type": "string",

                      "example": "mounthPath"

                    }

                  }

                }

              },

              "environment": {

                "type": "array",

                "items": {

                  "type": "object",

                  "properties": {

                    "name": {

                      "type": "string",

                      "example": "TEST_VALUE"

                    },

                    "value": {

                      "type": "string",

                      "example": "1.2.3"

                    }

                  }

                }

              }

            }

          }

        }

      }

    },

    "COMPSsTask": {

      "description": "A representation of a Rotterdam Task (version 1.1) - COMPSs",

      "type": "object",

      "required": [

        "name qos containers"

      ],

      "properties": {

        "name": {

          "type": "string",

          "example": "redis-app"

        },

        "dock": {

          "type": "string",

          "example": "class"

        },

        "qos": {

          "type": "object",

          "required": [

            "name"

          ],

          "properties": {

            "name": {

              "type": "string",

              "example": "DeadlinesMissed_1"

            },

            "description": {

              "type": "string",

              "example": "scale up task if deadlines_missed > 1"

            }

          }

        },

        "replicas": {

          "type": "int",

          "example": 2

        },

        "containers": {

          "type": "array",

          "items": {

            "type": "object",

            "required": [

              "name image ports"

            ],

            "properties": {

              "name": {

                "type": "string",

                "example": "redis"

              },

              "image": {

                "type": "string",

                "example": "redis"

              },

              "ports": {

                "type": "array",

                "items": {

                  "type": "object",

                  "properties": {

                    "containerPort": {

                      "type": "int",

                      "example": 6379

                    },

                    "hostPort": {

                      "type": "int",

                      "example": 6379

                    },

                    "protocol": {

                      "type": "string",

                      "example": "tcp"

                    }

                  }

                }

              },

              "volumes": {

                "type": "array",

                "items": {

                  "type": "object",

                  "properties": {

                    "name": {

                      "type": "string",

                      "example": "name"

                    },

                    "mounthPath": {

                      "type": "string",

                      "example": "mounthPath"

                    }

                  }

                }

              },

              "environment": {

                "type": "array",

                "items": {

                  "type": "object",

                  "properties": {

                    "name": {

                      "type": "string",

                      "example": "TEST_VALUE"

                    },

                    "value": {

                      "type": "string",

                      "example": "1.2.3"

                    }

                  }

                }

              }

            }

          }

        }

      }

    },

    "Function": {

      "description": "A representation of a Rotterdam Function",

      "type": "object",

      "required": [

        "name qos containers"

      ],

      "properties": {

        "name": {

          "type": "string",

          "example": "helloworld"

        },

        "dock": {

          "type": "string",

          "example": "default"

        },

        "cluster": {

          "type": "string",

          "example": "maincluster"

        },

        "type": {

          "type": "string",

          "example": "function"

        },

        "runtime": {

          "type": "string",

          "example": "python2.7"

        },

        "timeout": {

          "type": "string",

          "example": "180"

        },

        "handler": {

          "type": "string",

          "example": "helloget.foo"

        },

        "functionType": {

          "type": "string",

          "example": "text"

        },

        "function": {

          "type": "string",

          "example": "def foo(event, context):\n    return \"hello world\"\n"

        }

      }

    }

  },

  "externalDocs": {

		"description": "Find out more about the CLASS project",

		"url": "https://class-project.eu/"

	}

}
